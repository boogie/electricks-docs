/**
 * Circular Pixel Animation - Magic Themed
 * 32x32 pixel grid arranged in a circle
 */

class PixelCircle {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        if (!this.container) return;

        this.gridSize = 32;
        this.pixels = [];
        this.currentFrame = 0;
        this.animationIndex = 0;

        this.init();
        this.startAnimation();
    }

    init() {
        // Create circular container
        const circle = document.createElement('div');
        circle.className = 'pixel-circle';

        // Create 32x32 grid
        for (let y = 0; y < this.gridSize; y++) {
            for (let x = 0; x < this.gridSize; x++) {
                const pixel = document.createElement('div');
                pixel.className = 'pixel';
                pixel.dataset.x = x;
                pixel.dataset.y = y;

                // Calculate if pixel should be visible (circular shape)
                const centerX = this.gridSize / 2;
                const centerY = this.gridSize / 2;
                const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));

                if (distance <= this.gridSize / 2) {
                    pixel.classList.add('visible');
                }

                circle.appendChild(pixel);
                this.pixels.push({element: pixel, x, y});
            }
        }

        this.container.appendChild(circle);
    }

    // Pixel art patterns - 32x32
    getPatterns() {
        return {
            // Spade suit
            spade: [
                "................................",
                "..............##................",
                ".............####...............",
                "............######..............",
                "...........########.............",
                "..........##########............",
                ".........############...........",
                "........##############..........",
                ".......################.........",
                "......##################........",
                ".....####################.......",
                "....######################......",
                "...########################.....",
                "..##########################....",
                ".############################...",
                "##############################..",
                "##############################..",
                ".############################...",
                "..##########################....",
                "...########..........########...",
                "....######............######....",
                ".....####..............####.....",
                "......##................##......",
                ".......##################.......",
                ".......##################.......",
                "........################........",
                ".........##############.........",
                "..........############..........",
                "...........##########...........",
                "............########............",
                ".............######.............",
                "..............####..............",
            ],

            // Heart suit
            heart: [
                "................................",
                ".......####........####.........",
                "......########....########......",
                ".....##########..##########.....",
                "....########################....",
                "...##########################...",
                "..############################..",
                "..############################..",
                ".##############################.",
                ".##############################.",
                "##############################..",
                "##############################..",
                ".############################...",
                ".############################...",
                "..##########################....",
                "...########################.....",
                "....######################......",
                ".....####################.......",
                "......##################........",
                ".......################.........",
                "........##############..........",
                ".........############...........",
                "..........##########............",
                "...........########.............",
                "............######..............",
                ".............####...............",
                "..............##................",
                "................................",
                "................................",
                "................................",
                "................................",
                "................................",
            ],

            // Diamond suit
            diamond: [
                "................................",
                "..............##................",
                ".............####...............",
                "............######..............",
                "...........########.............",
                "..........##########............",
                ".........############...........",
                "........##############..........",
                ".......################.........",
                "......##################........",
                ".....####################.......",
                "....######################......",
                "...########################.....",
                "..##########################....",
                ".############################...",
                "##############################..",
                ".############################...",
                "..##########################....",
                "...########################.....",
                "....######################......",
                ".....####################.......",
                "......##################........",
                ".......################.........",
                "........##############..........",
                ".........############...........",
                "..........##########............",
                "...........########.............",
                "............######..............",
                ".............####...............",
                "..............##................",
                "................................",
                "................................",
            ],

            // Club suit
            club: [
                "................................",
                "..............##................",
                ".............####...............",
                "............######..............",
                "...........########.............",
                "..........##########............",
                "..........##########............",
                "...........########.............",
                "............######..............",
                ".....####....####....####.......",
                "....######..######..######......",
                "...########.######.########.....",
                "..##################.######.....",
                ".########################.......",
                ".########################.......",
                "..######################........",
                "...####################.........",
                "....##################..........",
                ".....################...........",
                "......##############............",
                ".......############.............",
                "........##########..............",
                ".........########...............",
                "..........######................",
                "...........####.................",
                ".......##################.......",
                ".......##################.......",
                "........################........",
                ".........##############.........",
                "..........############..........",
                "...........##########...........",
                "............########............",
            ],

            // Magic wand
            wand: [
                "................................",
                "..........................##....",
                ".........................####...",
                "........................####....",
                ".......................####.....",
                "......................####......",
                ".....................####.......",
                "....................####........",
                "...................####.........",
                "..................####..........",
                ".................####...........",
                "................####............",
                "...............####.............",
                "..............####..............",
                ".............####...............",
                "............####................",
                "...........####.................",
                "..........####..................",
                ".........####...................",
                "........####....................",
                ".......####.....................",
                "......####......................",
                ".....####.......................",
                "....####........................",
                "...####......######.............",
                "..####.....########.............",
                ".####......########.............",
                "####.......########.............",
                "...........########.............",
                "............######..............",
                "................................",
                "................................",
            ],

            // Star
            star: [
                "................................",
                "..............##................",
                "..............##................",
                ".............####...............",
                ".............####...............",
                "............######..............",
                "............######..............",
                "...........########.............",
                "...........########.............",
                "..........##########............",
                ".....####################.......",
                ".....####################.......",
                "......##################........",
                ".......################.........",
                "........##############..........",
                ".........############...........",
                "..........##########............",
                "..........##..##..##............",
                ".........####.##.####...........",
                "........######..######..........",
                ".......####..##..####...........",
                "......####...##...####..........",
                ".....####....##....####.........",
                "....####.....##.....####........",
                "...####......##......####.......",
                "..####...................####...",
                ".####.....................####..",
                "................................",
                "................................",
                "................................",
                "................................",
                "................................",
            ],

            // Rabbit in hat
            rabbit: [
                "................................",
                "..........####....####..........",
                ".........######..######.........",
                "........########.#######........",
                "........########.########.......",
                ".......################.........",
                ".......################.........",
                ".......################.........",
                "........##############..........",
                ".........############...........",
                "..........##########............",
                "...........########.............",
                "............######..............",
                ".............####...............",
                "..............##................",
                "................................",
                ".........##############.........",
                "........################........",
                ".......##################.......",
                "......####################......",
                ".....######################.....",
                "....########################....",
                "...##########################...",
                "..############################..",
                "..############################..",
                ".##############################.",
                ".##############################.",
                "##############################..",
                "##############################..",
                ".############################...",
                "..##########################....",
                "...########################.....",
            ],

            // Playing card
            card: [
                "................................",
                ".....##################.........",
                ".....##################.........",
                ".....##..............##.........",
                ".....##...####.......##.........",
                ".....##..######......##.........",
                ".....##..########....##.........",
                ".....##..########....##.........",
                ".....##...######.....##.........",
                ".....##....####......##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##..............##.........",
                ".....##......####....##.........",
                ".....##.....######...##.........",
                ".....##....########..##.........",
                ".....##....########..##.........",
                ".....##.....######...##.........",
                ".....##......####....##.........",
                ".....##################.........",
                ".....##################.........",
            ],
        };
    }

    drawPattern(patternName, color = '#ff6b35') {
        const patterns = this.getPatterns();
        const pattern = patterns[patternName];

        if (!pattern) return;

        this.pixels.forEach(({element, x, y}) => {
            if (y < pattern.length && x < pattern[y].length) {
                if (pattern[y][x] === '#') {
                    element.style.backgroundColor = color;
                    element.classList.add('active');
                } else {
                    element.style.backgroundColor = 'transparent';
                    element.classList.remove('active');
                }
            }
        });
    }

    clearPattern() {
        this.pixels.forEach(({element}) => {
            element.style.backgroundColor = 'transparent';
            element.classList.remove('active');
        });
    }

    fadeTransition(fromPattern, toPattern, duration = 1000) {
        const patterns = this.getPatterns();
        const from = patterns[fromPattern];
        const to = patterns[toPattern];

        if (!from || !to) return;

        let progress = 0;
        const steps = 30;
        const interval = duration / steps;

        const animate = () => {
            progress++;
            const alpha = progress / steps;

            this.pixels.forEach(({element, x, y}) => {
                if (y < to.length && x < to[y].length) {
                    const fromActive = from[y] && from[y][x] === '#';
                    const toActive = to[y][x] === '#';

                    if (toActive) {
                        element.style.opacity = alpha;
                        element.style.backgroundColor = '#ff6b35';
                        element.classList.add('active');
                    } else if (fromActive) {
                        element.style.opacity = 1 - alpha;
                    } else {
                        element.style.backgroundColor = 'transparent';
                        element.classList.remove('active');
                    }
                }
            });

            if (progress < steps) {
                setTimeout(animate, interval);
            } else {
                this.pixels.forEach(({element}) => {
                    element.style.opacity = 1;
                });
            }
        };

        animate();
    }

    startAnimation() {
        const sequence = [
            {pattern: 'spade', duration: 3000, color: '#ff6b35'},
            {pattern: 'heart', duration: 3000, color: '#ff4500'},
            {pattern: 'diamond', duration: 3000, color: '#ff8557'},
            {pattern: 'club', duration: 3000, color: '#ff6b35'},
            {pattern: 'wand', duration: 3000, color: '#ffa500'},
            {pattern: 'star', duration: 3000, color: '#ffd700'},
            {pattern: 'rabbit', duration: 3000, color: '#ff6b35'},
            {pattern: 'card', duration: 3000, color: '#ff4500'},
        ];

        let currentIndex = 0;

        const showNext = () => {
            const current = sequence[currentIndex];
            const next = sequence[(currentIndex + 1) % sequence.length];

            this.fadeTransition(current.pattern, next.pattern, 1000);

            currentIndex = (currentIndex + 1) % sequence.length;
            setTimeout(showNext, current.duration);
        };

        // Start with first pattern
        this.drawPattern(sequence[0].pattern, sequence[0].color);
        setTimeout(showNext, sequence[0].duration);
    }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    new PixelCircle('pixelCircleContainer');
});
